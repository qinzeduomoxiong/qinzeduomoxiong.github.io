<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/11/22/a-li-kai-yuan-fen-bu-shi-shi-wu-kuang-jia-fescar/"/>
      <url>/2019/11/22/a-li-kai-yuan-fen-bu-shi-shi-wu-kuang-jia-fescar/</url>
      
        <content type="html"><![CDATA[<h2 id="阿里开源分布式事务框架fescar"><a href="#阿里开源分布式事务框架fescar" class="headerlink" title="阿里开源分布式事务框架fescar"></a>阿里开源分布式事务框架fescar</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着微服务的普及，各中小公司都上了微服务，也伴随而来很多问题，如服务划分、系统分层、分库分表、分布式事务等，由于之前项目业务量都不大，虽然用上了微服务，但是并未涉及到太多问题，尤其是分布式事务，从未在项目中使用，但是新项目由于日均并发量可达40w左右，项目划分多个服务，不得不使用分布式事务…..</p><p>从网上查找了很多资料，现存的分布式事务方案有 JTA，XA，TCC，中间件，工作流等……表示头大</p><p>同事网上找到了一篇关于阿里开源的分布式事务框架fescar，现将博客内容引用，便于后面学习和项目上使用。</p><p>原博地址：<a href="http://www.pianshen.com/article/7801269456/" target="_blank" rel="noopener">http://www.pianshen.com/article/7801269456/</a></p><p>如有侵权，请联系我删除（vx cleaner_rzq）。。。。</p><p>在上面提到的几个常见方案中，首先PASS了最简单暴力的JTA和XA事务，因为我已经受够了多数据源切换各种神奇的一个库回滚一个库不回滚或者干脆全都没回滚的神奇问题。</p><p>然后是TCC，跑到github上看了看bytetcc的开源项目，6天前已经更新到0.5.0了，然而实现方式仍然繁琐，不过还能接受，更新频率挺高，继续观望吧。</p><p>消息中间件方案依然是各种复杂，眼睛有点花，想想这没有一个团队帮我搞，不是短期能搞定的，再想想我这可怜的16g内存，虚拟机装了这么多东西，写不动代码了咋搞，跳过……</p><p>工作流类的，Saga什么的，感觉跟TCC差不多，也是冗余代码一大堆。</p><p>难道，分布式事务就是这么折腾么？</p><p>突然，想起还有个阿里的GTS没研究过，看了下介绍（其实重点是看到了示例代码orz），原来分布式事务还可以这么简单，代码侵入几乎没有，而且竟然开源了，也就是标题中的fescar。</p><p>github地址：<a href="https://github.com/alibaba/fescar" target="_blank" rel="noopener">https://github.com/alibaba/fescar</a></p><h2 id="什么是Fescar？"><a href="#什么是Fescar？" class="headerlink" title="什么是Fescar？"></a>什么是Fescar？</h2><p>一种<strong>分布式事务解决方案</strong>，具有高性能和易于使用的<strong>微服务</strong>架构。</p><h3 id="微服务中的分布式事务问题"><a href="#微服务中的分布式事务问题" class="headerlink" title="微服务中的分布式事务问题"></a>微服务中的分布式事务问题</h3><p>让我们想象一下传统的单机应用程序。其业务由3个模块构成。他们使用单个本地数据源。</p><p>当然，本地事务将保证数据的一致性。</p><p><a href="https://camo.githubusercontent.com/400c70938b835e0b8ecc70ca61b3504e2aba891e/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f6c61726b2f302f323031382f706e672f31383836322f313534353239363737303234342d34636564663337652d396463362d346663302d613937662d6634323430623964383634302e706e67" target="_blank" rel="noopener"><img src="http://www.pianshen.com/images/521/3a538ebf5ae9db270adb25d43a336111.png" alt="单片应用程序"></a></p><p>微服务架构的情况发生了变化。上面提到的3个模块被设计为3个不同数据源之上的3个服务。本地事务自然保证每个服务中的数据一致性。</p><p><strong>但整个业务逻辑范围如何呢？</strong></p><p><a href="https://camo.githubusercontent.com/5729bd180e2c5b4a54f93c9d0a40dc06117e8565/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f6c61726b2f302f323031382f706e672f31383836322f313534353239363738313233312d34303239646139632d383830332d343361342d616332662d3663386231653265613434382e706e67" target="_blank" rel="noopener"><img src="http://www.pianshen.com/images/632/7d8859b927601eaf492929fb4990bb48.png" alt="微服务问题"></a></p><h3 id="Fescar怎么样？"><a href="#Fescar怎么样？" class="headerlink" title="Fescar怎么样？"></a>Fescar怎么样？</h3><p>Fescar只是解决上述问题的方法。</p><p><a href="https://camo.githubusercontent.com/b3a71332ae0a91db7f8616286a69b879fcbea672/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f6c61726b2f302f323031382f706e672f31383836322f313534353239363739313037342d33626365376263652d303235652d343563332d393338362d3762393531333564616465382e706e67" target="_blank" rel="noopener"><img src="http://www.pianshen.com/images/345/1c2fd96df3fe0c5ed37486e5148ca551.png" alt="Fescar解决方案"></a></p><p>首先，如何定义<strong>分布式事务</strong>？</p><p>我们说，<strong>分布式事务</strong>是一个<strong>全局事务</strong>，由一批<strong>分支事务组成</strong>，通常<strong>分支事务</strong>只是<strong>本地事务</strong>。</p><p><a href="https://camo.githubusercontent.com/9d741875c9d7f99887fc4075b9fd4a4b67b69ade/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f6c61726b2f302f323031382f706e672f31383836322f313534353031353435343937392d61313865313666362d656434312d343466312d396337612d6264383263346435666639392e706e67" target="_blank" rel="noopener"><img src="http://www.pianshen.com/images/611/80c81e72cc846a7e53bf3cf9b56697b3.png" alt="全球和分公司"></a></p><p>Fescar有3个基本组件：</p><ul><li><strong>事务协调器（TC）：</strong>维护全局和分支事务的状态，驱动全局提交或回滚。</li><li><strong>Transaction Manager（TM）：</strong>定义全局事务的范围：开始全局事务，提交或回滚全局事务。</li><li><strong>资源管理器（RM）：</strong>管理分支事务的资源，与TC通信以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li></ul><p><a href="https://camo.githubusercontent.com/e8fd6ca40ba959962a537cbc1be58013486cf46c/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f6c61726b2f302f323031382f706e672f31383836322f313534353031333931353238362d34613930663064662d356664612d343165312d393165302d3261613364333331633033352e706e67" target="_blank" rel="noopener"><img src="http://www.pianshen.com/images/628/3f76fd0ed76730a685c9ec4e5c3b47bc.png" alt="模型"></a></p><p>Fescar管理分布式事务的典型生命周期：</p><ol><li>TM要求TC开始新的全局交易。TC生成表示全局事务的XID。</li><li>XID通过微服务的调用链传播。</li><li>RM将本地事务注册为XID到TC的相应全局事务的分支。</li><li>TM要求TC提交或回滚XID的相应全局事务。</li><li>TC在XID的相应全局事务下驱动所有分支事务以完成分支提交或回滚。</li></ol><p><a href="https://camo.githubusercontent.com/0384806afd7c10544c258ae13717e4229942aa13/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f6c61726b2f302f323031382f706e672f31383836322f313534353239363931373838312d32366661626562392d373166612d346633652d386137612d6663333137643333383966342e706e67" target="_blank" rel="noopener"><img src="http://www.pianshen.com/images/670/499db8b86478f69ef548fe611ee0e4ee.png" alt="典型流程"></a></p><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><ul><li><strong>TXC</strong>：Taobao Transaction Constructor。阿里巴巴中间件团队自2014年起启动该项目，以解决因应用程序架构从单机改为微服务而导致的分布式事务问题。</li><li><strong>GTS</strong>：Global Transaction Service。TXC作为阿里云中间件产品，新名称GTS自2016年起发布。</li><li><strong>Fescar</strong>：我们从2019年开始基于TXC / GTS开源开源项目Fescar，以便在未来与社区密切合作。</li></ul><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h2 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h2><p>用户购买商品的业务逻辑。整个业务逻辑由3个微服务提供支持：</p><ul><li>存储服务：扣除给定商品的存储数量。</li><li>订单服务：根据购买请求创建订单。</li><li>帐户服务：借记用户帐户的余额。</li></ul><h3 id="建筑"><a href="#建筑" class="headerlink" title="建筑"></a>建筑</h3><p><img src="http://www.pianshen.com/images/712/36a80baa570aa477f2e44975453dc3e0.png" alt="建筑"></p><h3 id="StorageService"><a href="#StorageService" class="headerlink" title="StorageService"></a>StorageService</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StorageService</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**     * deduct storage count     */</span>    <span class="token keyword">void</span> <span class="token function">deduct</span><span class="token punctuation">(</span>String commodityCode<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="OrderService"><a href="#OrderService" class="headerlink" title="OrderService"></a>OrderService</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**     * create order     */</span>    Order <span class="token function">create</span><span class="token punctuation">(</span>String userId<span class="token punctuation">,</span> String commodityCode<span class="token punctuation">,</span> <span class="token keyword">int</span> orderCount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="AccountService"><a href="#AccountService" class="headerlink" title="AccountService"></a>AccountService</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**     * debit balance of user's account     */</span>    <span class="token keyword">void</span> <span class="token function">debit</span><span class="token punctuation">(</span>String userId<span class="token punctuation">,</span> <span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="主要业务逻辑"><a href="#主要业务逻辑" class="headerlink" title="主要业务逻辑"></a>主要业务逻辑</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BusinessService</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> StorageService storageService<span class="token punctuation">;</span>     <span class="token keyword">private</span> OrderService orderService<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * purchase     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">purchase</span><span class="token punctuation">(</span>String userId<span class="token punctuation">,</span> String commodityCode<span class="token punctuation">,</span> <span class="token keyword">int</span> orderCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>         storageService<span class="token punctuation">.</span><span class="token function">deduct</span><span class="token punctuation">(</span>commodityCode<span class="token punctuation">,</span> orderCount<span class="token punctuation">)</span><span class="token punctuation">;</span>         orderService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> commodityCode<span class="token punctuation">,</span> orderCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> OrderDAO orderDAO<span class="token punctuation">;</span>     <span class="token keyword">private</span> AccountService accountService<span class="token punctuation">;</span>     <span class="token keyword">public</span> Order <span class="token function">create</span><span class="token punctuation">(</span>String userId<span class="token punctuation">,</span> String commodityCode<span class="token punctuation">,</span> <span class="token keyword">int</span> orderCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span> orderMoney <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>commodityCode<span class="token punctuation">,</span> orderCount<span class="token punctuation">)</span><span class="token punctuation">;</span>         accountService<span class="token punctuation">.</span><span class="token function">debit</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> orderMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>         Order order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>        order<span class="token punctuation">.</span>commodityCode <span class="token operator">=</span> commodityCode<span class="token punctuation">;</span>        order<span class="token punctuation">.</span>count <span class="token operator">=</span> orderCount<span class="token punctuation">;</span>        order<span class="token punctuation">.</span>money <span class="token operator">=</span> orderMoney<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// INSERT INTO orders ...        return orderDAO.insert(order);    }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="FESCAR的分布式事务解决方案"><a href="#FESCAR的分布式事务解决方案" class="headerlink" title="FESCAR的分布式事务解决方案"></a>FESCAR的分布式事务解决方案</h2><p><img src="http://www.pianshen.com/images/336/aa4111dd1f118b49684c2b4d437aabd0.png" alt="未定义"></p><p>我们只需要一个<code>@GlobalTransactional</code>关于业务方法的注释：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GlobalTransactional</span> <span class="token keyword">public</span>  <span class="token keyword">void</span> purchase（String userId，String commodityCode，<span class="token keyword">int</span> orderCount）<span class="token punctuation">{</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="示例由Dubbo-FESCAR提供"><a href="#示例由Dubbo-FESCAR提供" class="headerlink" title="示例由Dubbo + FESCAR提供"></a>示例由Dubbo + FESCAR提供</h2><h3 id="第1步：设置数据库"><a href="#第1步：设置数据库" class="headerlink" title="第1步：设置数据库"></a>第1步：设置数据库</h3><ul><li>要求：带有InnoDB引擎的MySQL。</li></ul><p><strong>注意：</strong>实际上，示例用例中的3个服务应该有3个数据库。但是，我们只需创建一个数据库并配置3个数据源即可。</p><p>使用刚刚创建的数据库URL /用户名/密码修改Spring XML。</p><p>dubbo-account-service.xml dubbo-order-service.xml dubbo-storage-service.xml</p><pre><code>        &lt; property  name = “ url ”  value = “ jdbc：mysql：// xxxx：3306 / xxx ” /&gt;        &lt; property  name = “ username ”  value = “ xxx ” /&gt;        &lt; property  name = “ password ”  value = “ xxx ” /&gt;</code></pre><h3 id="第2步：创建UNDO-LOG表"><a href="#第2步：创建UNDO-LOG表" class="headerlink" title="第2步：创建UNDO_LOG表"></a>第2步：创建UNDO_LOG表</h3><p><code>UNDO_LOG</code> 表是FESCAR AT模式所必需的。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>undo_log<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>xid<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>rollback_info<span class="token punctuation">`</span> <span class="token keyword">longblob</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>log_status<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>log_created<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>log_modified<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>ext<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_unionkey<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">159</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第3步：创建表格，例如业务"><a href="#第3步：创建表格，例如业务" class="headerlink" title="第3步：创建表格，例如业务"></a>第3步：创建表格，例如业务</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>storage_tbl<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>storage_tbl<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>commodity_code<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>count<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>commodity_code<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>  <span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>order_tbl<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>order_tbl<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>commodity_code<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>count<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>money<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>  <span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>account_tbl<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>account_tbl<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>money<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第4步：启动服务器"><a href="#第4步：启动服务器" class="headerlink" title="第4步：启动服务器"></a>第4步：启动服务器</h3><ul><li>从<a href="https://github.com/alibaba/fescar/releases下载服务器包，解压缩。" target="_blank" rel="noopener">https://github.com/alibaba/fescar/releases下载服务器包，解压缩。</a></li></ul><blockquote><pre><code>sh fescar-server.sh $ LISTEN_PORT  $ PATH_FOR_PERSISTENT_DATA例如sh fescar-server.sh 8091 / home / admin / fescar / data /</code></pre></blockquote><h3 id="第5步：运行示例"><a href="#第5步：运行示例" class="headerlink" title="第5步：运行示例"></a>第5步：运行示例</h3><p>示例工程：<a href="https://github.com/fescar-group/fescar-samples" target="_blank" rel="noopener">https://github.com/fescar-group/fescar-samples</a></p><blockquote><ul><li>启动AccountService</li><li>启动StorageService</li><li>启动OrderService</li><li>运行BusinessService进行演示测试</li></ul></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统下如何执行Linux命令</title>
      <link href="/2019/09/12/2019-09-12-windows-xi-tong-xia-ru-he-zhi-xing-linux-ming-ling/"/>
      <url>/2019/09/12/2019-09-12-windows-xi-tong-xia-ru-he-zhi-xing-linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>最近两天搭建hexo框架的过程中发现GitHub上的很多开源项目的插件等安装都是基于Linux命令的，由于本地开发基本都是在win下，所以网上了解了下大概有几种方式可以实现win下执行Linux命令，亲测CygwinPortable软件可用，步骤如下：</p><ol><li>下载安装包</li><li>解压安装CygwinPortable</li><li>配置环境变量，path下增加CygwinPortable/bin路径</li><li>完成上述步骤即可在win系统下执行Linux命令</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二零一七年终总结</title>
      <link href="/2018/01/22/2017-conclusion/"/>
      <url>/2018/01/22/2017-conclusion/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66"></iframe></div><p>时间过得很快，终于等到放寒假了，虽然这几个月没有课，天天和放假也没啥区别呢。细数一下，还有5个月就要毕业了吧，大一刚入学的场景却依然清楚地记得，转眼间就成了老学长了呢。闲来无事，随便写写，有感而发，无病呻吟而已。</p><h1 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h1><hr><p>回顾我的2017，没做什么事，令我能记得就3件大事吧：</p><ul><li>失恋ing</li><li>ACM退役</li><li>顺利保研</li></ul><p><strong>第一件事</strong>就不想过多回忆了，<strong>2014.12.13 ~ 2017.03.01</strong>，曲终人散。<br><img src="749826.jpg" alt><br>最后引用《我的少女时代》里的一句话吧。</p><blockquote><p>每人都有一颗林真心，遇见是最美好的小幸运，谢谢你出现在我的青春里。</p></blockquote><p><img src="1.jpg" alt><br><strong>第二件事</strong>其实也是黯淡退出吧，大三下开始课程繁忙，也就没怎么训练了，再加上暑假考驾照，于是乎就退役了。回顾三年来，从大一入学时电脑都没怎么碰过的小白，到现在算法也略有所知，也是付出过很大的努力吧，毕竟当年每天刷题，为了一个bug而熬夜到凌晨。最后也算是混了个水水的金牌，奖项不算耀眼。但最重要的是从这段经历中，学到了拼搏、坚持的一种精神，这对以后的研究生涯想必也有很大帮助。<br><img src="2.jpg" alt><br><strong>第三件事</strong>也是意料之中吧，没有什么波折。纠结了很多，虽然<strong>专业第一</strong>，但是最后还是选择保了本校。要问原因，也许是校园情怀，也许是导师人很好，也许是为了方便更早研究，也许就是懒吧。现在尘埃落定，靠人靠天不如靠自己，继续努力吧。<br><img src="3.jpg" alt></p><p>过去的一年，学业未有很大长进，看着同学们整页的4.0绩点，心里倒也没有什么不平衡了。下学期保了研之后选了一门研究生的文本挖掘课，也马马虎虎读了几十篇论文，也算是对自然语言处理和深度学习入了个门，最后的presentation做的还算满意。</p><h1 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h1><hr><p>今年最重要的大事莫过于毕业论文了，因为以后要做的方向是句法分析，所以导师给我的毕业论文安排的就是《基于循环神经网络的成分句法分析》。虽然说是基于ACL2013的一篇论文改编的，但是目前为止，我还没有发现有人做和这个完全一样的。也许最后写的好的话可以直接发paper了。</p><p>但是目前基本的框架还没完全搭建起来吧，代码还不是很熟练，现在只写了一个最基础的动态规划+RNN。最近有如下计划：</p><ul><li>准备试一下动态规划+LSTM。</li><li>然后动态规划扩增一个维度，用来保存左右结点的head结点。</li><li>如果这个写好了，就可以和我github找到的PCFG+CYK代码融合了，准备加上每个结点的POS。</li><li>最后加入预训练词向量应该就基本完成了。</li></ul><p>希望能顺利毕业吧，前一段时间一直对一些实现细节有些困惑，代码还写错了，还以为理论错了。也不知道最后出来的结果会怎么样，希望能不错。</p><p>生活方面，最近半年越来越懒了，极少出门，睡得晚，起的也晚。最近买了把尤克里里，也算是陶冶陶冶情操吧，不至于一直盯着电脑。现在也小有长进，能弹一点点了。</p><p>现在能聊天的人越来越少了，QQ微信放那一天也不一定会有人来找，就算有人也多半是咨询问题的，等一个可以交心的人吧。有时我也想过，我是不是太像中央空调了，对所有人都这么有耐心，到头来却还是一个人，付出那么多最后还是一无所有。<br><img src="4.jpg" alt><br>最后还是祝自己2018年顺利吧，希望毕业顺利，研究生涯小有收获，最后等一个有缘人吧。</p><blockquote><p>我遇见谁，会有怎样的对白。<br>我等的人，她在多远的未来。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
